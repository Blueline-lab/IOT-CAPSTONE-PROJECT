 
                                                                                                    CAPSTONE PROJECT
 

01.06.23








Additional source of the project : 

https://github.com/Blueline-lab/IOT-CAPSTONE-PROJECT                                                                                              



                                                                                            Introduction
                                                                                            Here i will present the final project of the Curtin University IOT_CAPSTONE module
 
I choose to participate in the Team C, the thematic is to 

"Develop an system for give more security in museums"
 In this problematic we can define two parts, the risks for the museums could be security types (from natural event) or safety types (from humans dammages types). 

The part of security will not be study in this document due to the largest of this case.

                                                                                            The safety part have equally two parts the malicious dammages and the dammages causes by mistakes or uncarrefulness.

                                                                                            By chance this two part could be covered by the same system.
                                                                                            

Indeed for protect the objects of the museum we could say 

"Don't touch the objetcs" 

But is not a safety measure cause the curiosity will be up of this measure and the malicious person too.

                                                                                            So we have one solution for let the visitors contemplate the objects but prevent any dangerous proximity with the objects.
                                                                                            We should define a safety zone to not pass by any unauthorized persons.

                                                                                            For prevent any violation of the system rules an alarm or flash detection is not a complete measure because malicious person don't care of system alerts.

 The only way for protect the objects after the alert was triggered will be the human presence.













This paper is compose in three parts as follow :


1. Material needed and configuration

2. Developement

3. Add-ons and important point



List of hardware components :

 

- MCU Raspberry Pico W
3.3v
Wifi connexion
Mini USB Connexion
Support UART, I2C, SPI


The MCU for this project could a Raspberry Pi 3 Pi 4 but it is too much compute power for the need and expensive to implement one RPI3 for each objects to protect.
It could be decentralized from the object and serve a futhers objects, But the wire management of this type of system give a complexity and follow the building infrastructure that could give problems.

The best way is to implement one tiny cheap MCU by object, RPI Pico W give enouth compute power for two sensors and data transmission.
This one support two threads, could run two loops.
Support Wifi connection
Mini usb connection for upload project.

Finally i choose this MCU because it is good documented
The firmwares are  update frequently and easy to update.



- Motion detecors
  
I have choose this Motion detector for the system : 

https://www.digikey.fr/fr/products/detail/sparkfun-electronics/SEN-13285/5673793

  I choose it cause it is a good value between price and quality.
  It support the MCU voltage.
  It work with one signal Pin for trigerred the MCU.

  Should able to configure for distance of detection.
  with the one wire signal we could use many pin of the Raspberry Pico W and use several of this sensors for cross the detection zone
 
The important step for this sensor will be to configure the distance of detection.

Longer detection could give more false alert
Shorter will not prevent and detect any contact




- Proximity detection
    
I talk abour proximity sensors in the previous documents.
    But after some research this type of sensors offer a to short detection in a ranger of 3-30mm.
    This type of sensor could not be used in this project.


- Wiring power supply

For powerring this MCU we will need a classic 3.3V converter, but that's mean all the objects of the museums should have wiring power alimentation for connect the 3.3v power supply

It could be a good idea to take in cost plans a Lipo and charger batterie for the case of hte museum is too old for have electric network add for the project, or in general in the case of any electrical work for this system couldn't be realized.
                                                                                                     

- Server
  
For this system, the plan is to implement a server for compute the data collected about alarm triggered.
  
We could organize the server with differents hardware, deppend of the client infrastructure :
    
	Client have a a server rackmount
      	We could a a rack in this rackmount for compute the data from our 		system and should include in the price cost this rack
        
     	Client don't have any rackmount infrastructure
      	we have to deploy a standalone server and include it in the plan 		cost
      
Here we can see than the cost for the system will really depend the objects to protects and the infrastructure already build.
   
Good consideration to take :
The services for this infrastructure will run in the "Serverless" categorie for a one Guard office.
In 85% of time the services of detection on the server will not consume all the capacity of the server.
  

- Wifi Access point

	We will need for this project a wifi acces point for connect the MCU to the server.

I choose to implement this Wifi router « TP LINK M600 Archer »
and add some repeaters if the museum is too large for have a coverage from the router.






- Redundancy
	
	As we seen this system cannot have fail, so it wiil be important to think about redundancy. For assist any material or electrical fails.
We will need to put pair of hardware for the server part.
Only on the server part because on the sensors part the hardware could be replace and configured quiclky.

We need a pair of server and a pair of Wifi AP Router.
The networks flux should be open from any point to any point of he system.

First if one Wifi AP is down the other one will replace the first.

Secondly because if we have two server we need to have the sames data stored on each. So we will need to periodically synchronize the two server.




Here a plan of the project
In the the Git project we will show a plan made with Packet Tracer


















2. Developement


Detection

For program the sensors to send data when they are trigerred we will save a program in the Pico W MCU.
We could choose to make this program in C, C++ or Python
For this paper and for the facility of developement i choose to use Python 3.9
It could be a better way to do it in C++, It could give more complexity and time for develop. But a a C++ program offer a better accuracy about implement and manage sensors.


Firmware
We will upload the firmware Micropython on the MCU
Past the module in boot mode and upload « rp2-pico-w-20230426-v1.20.0 »
After a reboot of the MCU we can acces via Minicom, Thonny, Vscode extension
to a shell from the Pico W.
That’s will help us for doing test.

For run any file at start we will need to name our main script « main.py » in Pico filesystem.


Tools

Thonny IDE
We will need one tool for have direct communication with our MCU, it will be a good way for doing direct test code.

Ampy
We will dowload Ampy tool 
(apt-get install ampy)

This tool offer the possibility to upload and remove permanent files on the MCU.

All this tools are free.



Here find the source code and demonstration of the project :
https://github.com/Blueline-lab/IOT-CAPSTONE-PROJECT


The communication protole used for this system is MQTT Message Queuing Telemetry Transport by Wifi 






For the development part we will need 

One publisher (The MCU)
One subscriber (The server)
Multiples subscriber (Phones guards and staff)

On the publisher part, when a signal is triggered it send a dataframe with the date and time, the position of the alert.
main.py and publisher.py should be upload on the Rasberry Pico.
When the Pico start the main.py file will be run.

The MQTT broker listen all the signals and send it on any devices if the devices are in subscribe mode with the same topic.

The suscriber.py file will listen for signal from the broker and process the signal when it come.

We need to create a mobile App for subscribe and receive the alert in real time.
The distribution of this ap should be controlled.
We could distribute or install the .apk (Android) for each phones.
And generate code or hash to enter for install the App.
This code or hash will be generate from the secure server and are limited to the number of phones distribued.
An web application for mobile phone enrolement should be a better option in a second time.

In this case the subscriber.py file store the signal in a database.

We will need a user application or website for alert guards when a alert come and show datas to the users.

We can imagine a phone application with a MQTT subscriber for get quickly the alarm from the broker.


The data collected are stored on a INFLUXDB database.
I choose this system because this DB is good for the quick request.
Particulary good thing for IOT projects.
The credentials point have good security.
The process it to distribute token for app for publisher and for all users of the Influx Database. The Token are generate from an unique panel control.
This process guarantee a good security connexion option.


Precisions about files :

For the DB credential i use Env variables, it’s useful to use configuration files.
But with the environement variables we never have to share the credentials and we can share the code ease. We have to define it in the server.


For the server part we could implement Docker on the server with docker-compose we could make a file where we store the env variables for DB credential and other configuration variables needed.

Let see the docker-compose.yaml file where we can find the three services needed for the server part.

First we have the Database with the env variable to get ata start, the ports options for bridge with the server, the volume, where datas are stored.

Secondly we have the Mosquitto MQTT Broker who always restart

And finnaly a AlpineOS image, for run our subscriber script.

In this case we use the broker and a subscriber on the same server for store the data collected. 

For time questions i don’t make for now the client part.
The Sensors and server part is the heart of this system and it wa necessary to begin with that.





3. Could be Add-ons 


As we saw in the previous exam about the general costs and revenus plan for this project, the add-ons and subscriptions could be a good thing for develop the project. It could give the necessary funds and insure more safety for the system.

- Computer vision Add-on
	
	A good add-on could be to implement camera from the building for computer vision proximity detection, by calculate in any time the pixels between a barrier/limits and the object we could know when a unnatural (colored) number of x pixels is triggered. 
With a alarm it will be necessary to control the result by human before any intervention.

The same thing could detect the density of population around one object and trigger not an “alarm” but signify a point of risk 
A point to follow with attention.


- Visualisations and statistics application

For visualize or map the point of visitors interest we could implement a web locale application who query the database and plot the data for make graph map or charts, Grafana could be a all un one solution but we could make the application too.
With an add-on we can sure make safety statistics.


- Make test partners and contact
	This point is the most important, because we will need to test the system 	for long time and so we will need to find partners tester.
	This partners will give views points on the system what’s wrong what’s 	should be update. It will be important to have a strong network of 
	partners for be sure than all the bugs and mistake are catch. 




ROADMAP


→ Get funds and buy the hardware parts
→ Find testers partners build a strong network with them
→ Connect and test the system with the new partners 
→ Find the mistake and important point to work 
→ Give constant update on the system following the return
→   




Finaly in the add-on part the most important thing is to stay in touch with the new technologies, for find how upgrade our system efficiently.
And stay near of the clients and partners, because for prevent any risk or mistake it’s import to ear and communicate with all the partners.
 





 
